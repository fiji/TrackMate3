package org.mastodon.revised.model.feature;

import java.io.File;
import java.io.IOException;
import java.util.Map;

import org.mastodon.io.ObjectToFileIdMap;

/**
 * Interface for Mastodon features.
 * <p>
 * A feature is a read-only quantity calculated for a model at runtime. They
 * store values that are defined for a model but are not required for the model
 * consistency. They are typically defined for a specific application by the
 * user; they are optional and their selection and calculation are triggered at
 * runtime.
 * <p>
 * They can be generated by a {@link FeatureComputer}, which is a SciJava
 * plugin. Therefore, 3rd parties can add features to Mastodon using SciJava
 * plugin discovery mechanism via feature computers.
 * <p>
 * Features management in application requires them to declare a String key that
 * must be unique within the application scope.
 * <p>
 * A Feature is defined for a specific target in the model (vertex, edge, graph,
 * etc.) which must be specified. The feature values are stored in an
 * implementation specific-manner.
 * <p>
 * Since many visualization tools in Mastodon deal with scalar, real feature
 * values, the computer must also be able to return a set of feature
 * projections, that translate or project the feature on several real scalar
 * values. Since the computer defines what the feature it compute is, it also
 * must be able to define the meaningful projections for the feature.
 *
 * @author Jean-Yves Tinevez
 *
 * @param <O>
 *            the type of the object this feature is defined for (target).
 * @param the
 *            type of value stored in this feature.
 */
public interface Feature< O, V >
{

	/**
	 * Returns the key of this feature.
	 *
	 * @return the feature key.
	 */
	public String getKey();

	/**
	 * Returns the feature projections for this feature.
	 * <p>
	 * They are returned as a map from projection keys to actual projections.
	 *
	 * @return the map of feature projections.
	 */
	public Map< String, FeatureProjection< O > > getProjections();

	/**
	 * Returns the class of the object this feature is defined on.
	 *
	 * @return the feature target class.
	 */
	public Class< O > getTargetClass();

	/**
	 * Returns the value stored in this feature associated with the specified
	 * target object. Potentially allocation-free version of
	 * {@link #get(Object)}.
	 *
	 * @param o
	 *            the target object.
	 * @param ref
	 *            a value reference object, that might be reused to avoid
	 *            instantiating a new one. It might be cleared, filled or
	 *            ignored depending on concrete implementation.
	 * @return the value.
	 */
	public V get( O o, V ref );

	/**
	 * Returns the value stored in this feature associated with the specified
	 * target object.
	 *
	 * @param o
	 *            the target object.
	 * @return the value.
	 */
	public V get( O o );

	/**
	 * Returns <code>true</code> if this feature contains a value associated
	 * with the specified target object.
	 *
	 * @param o
	 *            the target object.
	 * @return <code>true</code> if a value exits for this object.
	 */
	public boolean isSet( O o );

	/**
	 * Serializes this feature to a raw file.
	 *
	 * @param file
	 *            the file to write.
	 * @throws IOException
	 *             if an IO error occurs during serialization.
	 */
	public void serialize( File file, final ObjectToFileIdMap< O > idmap ) throws IOException;
}
