package org.mastodon.revised.model.feature;

import java.util.Map;

import org.mastodon.properties.PropertyMap;

/**
 * Mastodon feature.
 * <p>
 * A feature is a quantity calculated for a model at runtime. They store values
 * that are defined for a model but are not required for the model consistency.
 * They are typically defined for a specific application by the user; they are
 * optional and their selection and calculation are triggered at runtime.
 * <p>
 * They can be generated by a {@link FeatureComputer}, which is a SciJava
 * plugin. Therefore, 3rd parties can add features to Mastodon using SciJava
 * plugin discovery mechanism via feature computers.
 * <p>
 * Features management in application requires them to declare a String key that
 * must be unique within the application scope.
 * <p>
 * A Feature is defined for a specific target in the model (vertex, edge, graph,
 * etc.) which must be specified. The feature values for each item of the model
 * are stored in a {@link PropertyMap} that can be accessed.
 * <p>
 * Since many visualization tools in Mastodon deal with scalar, real feature
 * values, the computer must also be able to return a set of feature
 * projections, that translate or project the feature on several real scalar
 * values. Since the computer defines what the feature it compute is, it also
 * must be able to define the meaningful projections for the feature.
 *
 * @author Jean-Yves Tinevez
 *
 * @param <O>
 *            the type of the object this feature is defined for (target).
 * @param <M>
 *            the type of the property map used to store feature values.
 */
public class Feature< O, M extends PropertyMap< O, ? > >
{

	/**
	 * The feature unique key.
	 */
	private final String key;

	/**
	 * The feature property map.
	 */
	private final M propertyMap;

	/**
	 * The feature projections, stored as a map from projection names to
	 * projections.
	 */
	private final Map< String, FeatureProjection< O > > projections;

	/**
	 * The class of the feature target.
	 */
	private final Class< O > targetClass;

	/**
	 * Creates a new immutable feature instance.
	 *
	 * @param key
	 *            The feature unique key. Must be unique within the application
	 *            scope.
	 * @param targetClass
	 *            The class of the feature target.
	 * @param propertyMap
	 *            The feature property map.
	 * @param projections
	 *            The feature projections, stored as a map from projection names
	 *            to projections.
	 */
	public Feature( final String key, final Class< O > targetClass, final M propertyMap, final Map< String, FeatureProjection< O > > projections )
	{
		this.key = key;
		this.targetClass = targetClass;
		this.propertyMap = propertyMap;
		this.projections = projections;
	}

	/**
	 * Returns the key of this feature.
	 *
	 * @return the feature key.
	 */
	public String getKey()
	{
		return key;
	}

	/**
	 * Returns the property map storing the values of this feature.
	 *
	 * @return the property map.
	 */
	public M getPropertyMap()
	{
		return propertyMap;
	}

	/**
	 * Returns the feature projections for this feature.
	 * <p>
	 * They are returned as a map from projection keys to actual projections.
	 *
	 * @return the map of feature projections.
	 */
	public Map< String, FeatureProjection< O > > getProjections()
	{
		return projections;
	}

	/**
	 * Returns the class of the object this feature is defined on.
	 *
	 * @return the feature target class.
	 */
	public Class< O > getTargetClass()
	{
		return targetClass;
	}
}
