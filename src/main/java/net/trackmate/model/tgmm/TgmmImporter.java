package net.trackmate.model.tgmm;

import static net.trackmate.io.XmlHelpers.getDoubleArrayAttribute;
import static net.trackmate.io.XmlHelpers.getDoubleAttribute;
import static net.trackmate.io.XmlHelpers.getIntAttribute;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.List;

import mpicbg.spim.data.SpimDataException;
import mpicbg.spim.data.registration.ViewRegistrations;
import mpicbg.spim.data.sequence.TimePoint;
import mpicbg.spim.data.sequence.TimePoints;
import mpicbg.spim.data.sequence.TimePointsPattern;
import net.imglib2.realtransform.AffineTransform3D;
import net.trackmate.graph.collection.CollectionUtils;
import net.trackmate.graph.collection.IntRefMap;
import net.trackmate.model.Link;
import net.trackmate.model.ModelGraph;
import net.trackmate.model.SpotSet;
import net.trackmate.model.tgmm.TgmmModel.SpotCovarianceFactory;

import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;

import bdv.spimdata.SpimDataMinimal;
import bdv.spimdata.XmlIoSpimDataMinimal;

public class TgmmImporter
{

	/**
	 * Import a set of XML file generated by the TGMM algorithm in a model.
	 *
	 * @param tgmmFileNameFormat
	 *            a string that can be parsed by
	 *            {@link String#format(String, Object...)} to generate target
	 *            TGMM filenames. Example:
	 *            {@code /Volumes/Data/TGMM_TL0-528_xmls_curated/GMEMfinalResult_frame%04d.xml}
	 * @param timepointsToRead
	 *            the desired time-points to read.
	 * @param viewRegistrations
	 *            the {@link ViewRegistrations} to position the tracks in the
	 *            proper coordinate system.
	 * @param setupID
	 *            the setup ID of the desired transform in the
	 *            ViewRegistrations.
	 * @param model
	 *            the {@link TgmmModel} to update with the read tracks/
	 * @return the {@link TgmmModel} specified above.
	 *
	 * @throws JDOMException
	 * @throws IOException
	 */
	public static TgmmModel read( final String tgmmFileNameFormat, final TimePoints timepointsToRead, final ViewRegistrations viewRegistrations, final int setupID, final TgmmModel model ) throws JDOMException, IOException
	{
		final ModelGraph< SpotCovariance > sc = model.getGraph();
		final SpotCovariance spot = sc.vertexRef();
		final SpotCovariance parent = sc.vertexRef();
		final SpotCovariance tmp = sc.vertexRef();
		final Link< SpotCovariance > edge = sc.edgeRef();

		SpotSet< SpotCovariance > previousFrame = null;
		IntRefMap< SpotCovariance > idToSpot = CollectionUtils.createIntVertexMap( sc, -1, 2000 );
		IntRefMap< SpotCovariance > previousIdToSpot = CollectionUtils.createIntVertexMap( sc, -1, 2000 );

		for ( final TimePoint timepoint : timepointsToRead.getTimePointsOrdered() )
		{
			final int timepointId = timepoint.getId();
			final AffineTransform3D transform = viewRegistrations.getViewRegistration( timepointId, setupID ).getModel();
			final SpotSet< SpotCovariance > frame = model.getSpots( timepointId );
			final String tgmmFileName = String.format( tgmmFileNameFormat, timepointId );
			System.out.println( tgmmFileName );

			final SAXBuilder sax = new SAXBuilder();
			final Document doc = sax.build( tgmmFileName );
			final Element root = doc.getRootElement();

			final List< Element > gaussianMixtureModels = root.getChildren( "GaussianMixtureModel" );
			for ( final Element elem : gaussianMixtureModels )
			{
				try
				{
					final double nu = getDoubleAttribute( elem, "nu" );
					final double[] m = getDoubleArrayAttribute( elem, "m" );
					final double[] W = getDoubleArrayAttribute( elem, "W" );
					final int id = getIntAttribute( elem, "id" );
//					final int lineage = getIntAttribute( elem, "lineage" );
					final int parentId = getIntAttribute( elem, "parent" );

					model.createSpot( timepointId, transform, nu, m, W, spot );

					frame.add( spot );
					idToSpot.put( id, spot, tmp );
					if ( ( previousFrame != null ) && ( parentId >= 0 ) && ( previousIdToSpot.get( parentId, parent ) != null ) )
						sc.addEdge( parent, spot, edge );
				}
				catch ( final NumberFormatException e )
				{
					System.out.println( "- Ignoring " + elem + ": " + e.getMessage() );
				}
			}

			previousFrame = frame;

			previousIdToSpot.clear();
			final IntRefMap< SpotCovariance > m = previousIdToSpot;
			previousIdToSpot = idToSpot;
			idToSpot = m;
		}

		sc.releaseRef( spot );
		sc.releaseRef( parent );
		sc.releaseRef( tmp );
		sc.releaseRef( edge );
		return model;
	}

	public static void main( final String[] args ) throws ParseException, SpimDataException, JDOMException, IOException
	{
//		final String tgmmFiles = "/Volumes/Data/TGMM_TL0-528_xmls_curated/GMEMfinalResult_frame%04d.xml";
		final String tgmmFiles = "/Users/pietzsch/Downloads/data/TGMMruns_testRunToCheckOutput/XML_finalResult_lht/GMEMfinalResult_frame%04d.xml";
//		final String bdvFile = "/Volumes/Data/BDV_MVD_5v_final.xml";
		final String bdvFile = "/Users/pietzsch/TGMM/data/tifs/datasethdf5.xml";
//		final int setupID = 1;
		final int setupID = 0;
//		final String target = "/Volumes/Data/model-small.raw";
		final String target = "/Users/pietzsch/TGMM/data/tifs/model_jy.raw";
//		final TimePoints timepoints = new TimePointsPattern( "1-528" );
//		final TimePoints timepoints = new TimePointsPattern( "1-100" );
		final TimePoints timepoints = new TimePointsPattern( "0-30" );

		System.out.println( "Started reading TGMM files." );
		System.out.println( " - TGMM files:\t\t" + tgmmFiles );
		System.out.println( " - SPIM data file:\t" + bdvFile );
		System.out.println( " - Setup ID:\t\t" + setupID );
		System.out.println( " - Time-points to import:\t" + timepoints );
		System.out.println( " - Save to:\t\t" + target );

		final long start = System.currentTimeMillis();

		System.out.print( "\nReading view registrations." );
		final SpimDataMinimal spimData = new XmlIoSpimDataMinimal().load( bdvFile );
		final ViewRegistrations viewRegistrations = spimData.getViewRegistrations();
		System.out.println( " Done." );

		System.out.println( "Reading the model." );
		TgmmModel model = new TgmmModel( new ModelGraph< SpotCovariance >( new SpotCovarianceFactory() ) );
		model = read( tgmmFiles, timepoints, viewRegistrations, setupID, model );
		final long end = System.currentTimeMillis();
		System.out.println( "Done  in " + ( end - start ) / 1000d + " s." );

		System.out.println( "\nExporting to " + target );
		RawIO.write( model, new File( target ) );
		final long end2 = System.currentTimeMillis();
		System.out.println( "Exporting done in " + ( end2 - end ) / 1000d + " s." );
	}
}
